// Code generated by protoc-gen-go. DO NOT EDIT.
// source: type_data_chunk.proto

package mservice

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DataChunkType int32

const (
	// Due to first enum value has to be zero in proto3
	DataChunkType_DATA_CHUNK_RESERVED    DataChunkType = 0
	DataChunkType_DATA_CHUNK_UNSPECIFIED DataChunkType = 100
	DataChunkType_DATA_CHUNK_DATA        DataChunkType = 200
)

var DataChunkType_name = map[int32]string{
	0:   "DATA_CHUNK_RESERVED",
	100: "DATA_CHUNK_UNSPECIFIED",
	200: "DATA_CHUNK_DATA",
}

var DataChunkType_value = map[string]int32{
	"DATA_CHUNK_RESERVED":    0,
	"DATA_CHUNK_UNSPECIFIED": 100,
	"DATA_CHUNK_DATA":        200,
}

func (x DataChunkType) String() string {
	return proto.EnumName(DataChunkType_name, int32(x))
}

func (DataChunkType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c69e33da091858ca, []int{0}
}

// DataChunk is a chunk of data transferred as a single piece.
// Can be part of bigger data, transferred by chunks
type DataChunk struct {
	Header *Header `protobuf:"bytes,100,opt,name=header,proto3" json:"header,omitempty"`
	// Types that are valid to be assigned to LenOptional:
	//	*DataChunk_Len
	LenOptional isDataChunk_LenOptional `protobuf_oneof:"len_optional"`
	// Types that are valid to be assigned to OffsetOptional:
	//	*DataChunk_Offset
	OffsetOptional isDataChunk_OffsetOptional `protobuf_oneof:"offset_optional"`
	// Types that are valid to be assigned to LastOptional:
	//	*DataChunk_Last
	LastOptional isDataChunk_LastOptional `protobuf_oneof:"last_optional"`
	// Bytes is the purpose of the whole data chunk type
	// May contain any arbitrary sequence of bytes no longer than 2^32
	Bytes                []byte   `protobuf:"bytes,500,opt,name=bytes,proto3" json:"bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataChunk) Reset()         { *m = DataChunk{} }
func (m *DataChunk) String() string { return proto.CompactTextString(m) }
func (*DataChunk) ProtoMessage()    {}
func (*DataChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_c69e33da091858ca, []int{0}
}

func (m *DataChunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataChunk.Unmarshal(m, b)
}
func (m *DataChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataChunk.Marshal(b, m, deterministic)
}
func (m *DataChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataChunk.Merge(m, src)
}
func (m *DataChunk) XXX_Size() int {
	return xxx_messageInfo_DataChunk.Size(m)
}
func (m *DataChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_DataChunk.DiscardUnknown(m)
}

var xxx_messageInfo_DataChunk proto.InternalMessageInfo

func (m *DataChunk) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type isDataChunk_LenOptional interface {
	isDataChunk_LenOptional()
}

type DataChunk_Len struct {
	Len uint64 `protobuf:"varint,200,opt,name=len,proto3,oneof"`
}

func (*DataChunk_Len) isDataChunk_LenOptional() {}

func (m *DataChunk) GetLenOptional() isDataChunk_LenOptional {
	if m != nil {
		return m.LenOptional
	}
	return nil
}

func (m *DataChunk) GetLen() uint64 {
	if x, ok := m.GetLenOptional().(*DataChunk_Len); ok {
		return x.Len
	}
	return 0
}

type isDataChunk_OffsetOptional interface {
	isDataChunk_OffsetOptional()
}

type DataChunk_Offset struct {
	Offset uint64 `protobuf:"varint,300,opt,name=offset,proto3,oneof"`
}

func (*DataChunk_Offset) isDataChunk_OffsetOptional() {}

func (m *DataChunk) GetOffsetOptional() isDataChunk_OffsetOptional {
	if m != nil {
		return m.OffsetOptional
	}
	return nil
}

func (m *DataChunk) GetOffset() uint64 {
	if x, ok := m.GetOffsetOptional().(*DataChunk_Offset); ok {
		return x.Offset
	}
	return 0
}

type isDataChunk_LastOptional interface {
	isDataChunk_LastOptional()
}

type DataChunk_Last struct {
	Last bool `protobuf:"varint,400,opt,name=last,proto3,oneof"`
}

func (*DataChunk_Last) isDataChunk_LastOptional() {}

func (m *DataChunk) GetLastOptional() isDataChunk_LastOptional {
	if m != nil {
		return m.LastOptional
	}
	return nil
}

func (m *DataChunk) GetLast() bool {
	if x, ok := m.GetLastOptional().(*DataChunk_Last); ok {
		return x.Last
	}
	return false
}

func (m *DataChunk) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DataChunk) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DataChunk_Len)(nil),
		(*DataChunk_Offset)(nil),
		(*DataChunk_Last)(nil),
	}
}

func init() {
	proto.RegisterEnum("mservice.DataChunkType", DataChunkType_name, DataChunkType_value)
	proto.RegisterType((*DataChunk)(nil), "mservice.DataChunk")
}

func init() {
	proto.RegisterFile("type_data_chunk.proto", fileDescriptor_c69e33da091858ca)
}

var fileDescriptor_c69e33da091858ca = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x41, 0x4e, 0xc2, 0x40,
	0x18, 0x85, 0x19, 0xc0, 0x06, 0x7f, 0xc1, 0x96, 0xc1, 0x6a, 0x65, 0xd5, 0xb8, 0x6a, 0x5c, 0x74,
	0xa1, 0x27, 0x80, 0xb6, 0xa6, 0xc4, 0x84, 0x98, 0x01, 0x5c, 0xb8, 0x69, 0x06, 0xfa, 0x13, 0x88,
	0xb5, 0x6d, 0xda, 0xd1, 0xa4, 0xb7, 0xf0, 0x20, 0xde, 0x43, 0x0e, 0xe4, 0x01, 0xcc, 0x4c, 0x11,
	0xd9, 0xcd, 0xfb, 0xbe, 0x79, 0x2f, 0x99, 0x01, 0x53, 0x54, 0x39, 0x46, 0x31, 0x17, 0x3c, 0x5a,
	0x6d, 0xde, 0xd3, 0x57, 0x37, 0x2f, 0x32, 0x91, 0xd1, 0xce, 0x5b, 0x89, 0xc5, 0xc7, 0x76, 0x85,
	0xc3, 0xbe, 0xba, 0xb0, 0x41, 0x1e, 0x63, 0x51, 0xcb, 0x9b, 0x6f, 0x02, 0xa7, 0x3e, 0x17, 0xdc,
	0x93, 0x05, 0xea, 0x80, 0x56, 0x5b, 0x2b, 0xb6, 0x89, 0x73, 0x76, 0x67, 0xb8, 0x7f, 0x5d, 0x37,
	0x54, 0x9c, 0xed, 0x3d, 0x1d, 0x40, 0x2b, 0xc1, 0xd4, 0xda, 0x11, 0x9b, 0x38, 0xed, 0xb0, 0xc1,
	0x64, 0xa2, 0xd7, 0xa0, 0x65, 0xeb, 0x75, 0x89, 0xc2, 0xfa, 0x6a, 0x2a, 0x4e, 0xd8, 0x1e, 0x50,
	0x13, 0xda, 0x09, 0x2f, 0x85, 0xf5, 0xd9, 0xb2, 0x89, 0xd3, 0x09, 0x9b, 0x4c, 0x45, 0x6a, 0xc2,
	0xc9, 0xb2, 0x12, 0x58, 0x5a, 0x3f, 0x92, 0x77, 0x59, 0x9d, 0xc6, 0xe7, 0xd0, 0x4d, 0x30, 0x8d,
	0xb2, 0x5c, 0x6c, 0xb3, 0x94, 0x27, 0xe3, 0x3e, 0xe8, 0xf5, 0xce, 0x3f, 0xd2, 0xa1, 0x27, 0x17,
	0x0e, 0xe0, 0xf6, 0x05, 0x7a, 0x87, 0x87, 0xcc, 0xab, 0x1c, 0xe9, 0x15, 0x0c, 0xfc, 0xd1, 0x7c,
	0x14, 0x79, 0xe1, 0x62, 0xfa, 0x18, 0xb1, 0x60, 0x16, 0xb0, 0xe7, 0xc0, 0x37, 0x1a, 0x74, 0x08,
	0x97, 0x47, 0x62, 0x31, 0x9d, 0x3d, 0x05, 0xde, 0xe4, 0x61, 0x12, 0xf8, 0x46, 0x4c, 0x2f, 0x40,
	0x3f, 0x72, 0xf2, 0x68, 0xec, 0xc8, 0x52, 0x53, 0x9f, 0x75, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff,
	0x7b, 0x02, 0xd4, 0x24, 0x62, 0x01, 0x00, 0x00,
}
