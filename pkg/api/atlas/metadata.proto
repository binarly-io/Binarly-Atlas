// Copyright 2020 The Atlas Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * Metadata defines all possible metadata for objects.
 * For example, for stream of dataChunks, is used to represent:
 *   - chunk header,
 *   - data descriptions,
 *   - data encoding descriptions,
 *   - etc.
 * Can also be used as metadata description for any other objects.
 * Since protobuf has ability not to send 'optional' fields, metadata can have full set of fields, describing
 * all possible metadata options and have only few of them which are really used sent to the correspondent.
 */
syntax = "proto3";

package atlas;

import "google/protobuf/timestamp.proto";
import "address_map.proto";
import "data_chunk_properties.proto";
import "presentation_options.proto";

// Metadata describes metadata of the object
message Metadata {
    oneof type_optional {
        // Optional. Type of the object.
        // Object has to have either type or name, one of the is mandatory.
        // Object can be typed/identified either by type or by name.
        int32 type = 100;
    }

    oneof name_optional {
        // Optional. Name of the object.
        // Object has to have either type or name, one of the is mandatory.
        // Object can be typed/identified either by type or by name.
        string name = 200;
    }

    oneof version_optional {
        // Optional. Version of the object.
        int32 version = 300;
    }

    oneof description_optional {
        // Optional. Description represents string human-readable description of the object.
        string description = 400;
    }

    oneof status_optional {
        // Optional. Status represents status code of the object.
        int32 status = 500;
    }

    oneof mode_optional {
        // Optional. Mode represents mode code of the object.
        int32 mode = 600;
    }

    oneof ts_optional {
        // Optional. Timestamp of the object.
        google.protobuf.Timestamp ts = 700;
    }

    oneof addresses_optional {
        // Optional. Addresses represents map of address of the object.
        // Internal and external or whatever may be needed.
        AddressMap addresses = 800;
    }

    oneof presentation_options_optional {
        // Optional. Presentation options of the object.
        PresentationOptions presentation_options = 900;
    }

    oneof data_chunk_properties_optional {
        // Optional. Data chunk -level properties ob the object.
        DataChunkProperties data_chunk_properties = 1000;
    }
}
