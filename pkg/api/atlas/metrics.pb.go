// Code generated by protoc-gen-go. DO NOT EDIT.
// source: metrics.proto

package atlas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// MetricsType represents areas of metrics accumulation - such as resource utilization, etc
type MetricsType int32

const (
	// Due to first enum value has to be zero in proto3
	MetricsType_METRICS_TYPE_RESERVED MetricsType = 0
	// Unspecified means we do not know its type
	MetricsType_METRICS_TYPE_UNSPECIFIED MetricsType = 100
	// Resource utilization, such as CPU, RAM, etc
	MetricsType_METRICS_TYPE_RESOURCE_UTILIZATION MetricsType = 200
)

var MetricsType_name = map[int32]string{
	0:   "METRICS_TYPE_RESERVED",
	100: "METRICS_TYPE_UNSPECIFIED",
	200: "METRICS_TYPE_RESOURCE_UTILIZATION",
}

var MetricsType_value = map[string]int32{
	"METRICS_TYPE_RESERVED":             0,
	"METRICS_TYPE_UNSPECIFIED":          100,
	"METRICS_TYPE_RESOURCE_UTILIZATION": 200,
}

func (x MetricsType) String() string {
	return proto.EnumName(MetricsType_name, int32(x))
}

func (MetricsType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{0}
}

// Metrics is a set of Metric tuples.
// Metric can be classified either by type or by name.
// MetricType can be specified once for the whole set of metrics, instead of specifying in each one of them.
type Metrics struct {
	// Header represents metadata of the set of metrics
	Header *Metadata `protobuf:"bytes,100,opt,name=header,proto3" json:"header,omitempty"`
	// Types that are valid to be assigned to TypeOptional:
	//	*Metrics_Type
	TypeOptional isMetrics_TypeOptional `protobuf_oneof:"type_optional"`
	// Types that are valid to be assigned to NameOptional:
	//	*Metrics_Name
	NameOptional isMetrics_NameOptional `protobuf_oneof:"name_optional"`
	// Metrics is the purpose of the whole Metrics data type, is expected to be present at all time.
	Metrics              []*Metric `protobuf:"bytes,400,rep,name=metrics,proto3" json:"metrics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Metrics) Reset()      { *m = Metrics{} }
func (*Metrics) ProtoMessage() {}
func (*Metrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_6039342a2ba47b72, []int{0}
}

func (m *Metrics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metrics.Unmarshal(m, b)
}
func (m *Metrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metrics.Marshal(b, m, deterministic)
}
func (m *Metrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metrics.Merge(m, src)
}
func (m *Metrics) XXX_Size() int {
	return xxx_messageInfo_Metrics.Size(m)
}
func (m *Metrics) XXX_DiscardUnknown() {
	xxx_messageInfo_Metrics.DiscardUnknown(m)
}

var xxx_messageInfo_Metrics proto.InternalMessageInfo

func (m *Metrics) GetHeader() *Metadata {
	if m != nil {
		return m.Header
	}
	return nil
}

type isMetrics_TypeOptional interface {
	isMetrics_TypeOptional()
}

type Metrics_Type struct {
	Type int32 `protobuf:"varint,200,opt,name=type,proto3,oneof"`
}

func (*Metrics_Type) isMetrics_TypeOptional() {}

func (m *Metrics) GetTypeOptional() isMetrics_TypeOptional {
	if m != nil {
		return m.TypeOptional
	}
	return nil
}

func (m *Metrics) GetType() int32 {
	if x, ok := m.GetTypeOptional().(*Metrics_Type); ok {
		return x.Type
	}
	return 0
}

type isMetrics_NameOptional interface {
	isMetrics_NameOptional()
}

type Metrics_Name struct {
	Name string `protobuf:"bytes,300,opt,name=name,proto3,oneof"`
}

func (*Metrics_Name) isMetrics_NameOptional() {}

func (m *Metrics) GetNameOptional() isMetrics_NameOptional {
	if m != nil {
		return m.NameOptional
	}
	return nil
}

func (m *Metrics) GetName() string {
	if x, ok := m.GetNameOptional().(*Metrics_Name); ok {
		return x.Name
	}
	return ""
}

func (m *Metrics) GetMetrics() []*Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Metrics) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Metrics_Type)(nil),
		(*Metrics_Name)(nil),
	}
}

func init() {
	proto.RegisterEnum("atlas.MetricsType", MetricsType_name, MetricsType_value)
	proto.RegisterType((*Metrics)(nil), "atlas.Metrics")
}

func init() { proto.RegisterFile("metrics.proto", fileDescriptor_6039342a2ba47b72) }

var fileDescriptor_6039342a2ba47b72 = []byte{
	// 268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0x4d, 0x2d, 0x29,
	0xca, 0x4c, 0x2e, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4d, 0x2c, 0xc9, 0x49, 0x2c,
	0x96, 0xe2, 0xcb, 0x4d, 0x2d, 0x49, 0x4c, 0x49, 0x2c, 0x49, 0x84, 0x08, 0x4b, 0xf1, 0x40, 0x54,
	0x41, 0x78, 0x4a, 0x6b, 0x18, 0xb9, 0xd8, 0x7d, 0x21, 0xda, 0x84, 0xd4, 0xb9, 0xd8, 0x32, 0x52,
	0x13, 0x53, 0x52, 0x8b, 0x24, 0x52, 0x14, 0x18, 0x35, 0xb8, 0x8d, 0xf8, 0xf5, 0xc0, 0x26, 0xe8,
	0xf9, 0x42, 0x0d, 0x08, 0x82, 0x4a, 0x0b, 0x89, 0x72, 0xb1, 0x94, 0x54, 0x16, 0xa4, 0x4a, 0x9c,
	0x60, 0x54, 0x60, 0xd4, 0x60, 0xf5, 0x60, 0x08, 0x02, 0x73, 0x41, 0xc2, 0x79, 0x89, 0xb9, 0xa9,
	0x12, 0x6b, 0x98, 0x14, 0x18, 0x35, 0x38, 0x3d, 0x18, 0x83, 0xc0, 0x5c, 0x21, 0x0d, 0x2e, 0x76,
	0xa8, 0xc3, 0x24, 0x26, 0x30, 0x2b, 0x30, 0x6b, 0x70, 0x1b, 0xf1, 0x22, 0x0c, 0x2e, 0xca, 0x4c,
	0x0e, 0x82, 0x49, 0x3b, 0xf1, 0x73, 0xf1, 0x82, 0x0c, 0x8a, 0xcf, 0x2f, 0x28, 0xc9, 0xcc, 0xcf,
	0x4b, 0xcc, 0x01, 0x09, 0x80, 0x8c, 0x80, 0x0b, 0x68, 0xe5, 0x71, 0x71, 0x43, 0x5d, 0x1b, 0x02,
	0xb2, 0x51, 0x92, 0x4b, 0xd4, 0xd7, 0x35, 0x24, 0xc8, 0xd3, 0x39, 0x38, 0x3e, 0x24, 0x32, 0xc0,
	0x35, 0x3e, 0xc8, 0x35, 0xd8, 0x35, 0x28, 0xcc, 0xd5, 0x45, 0x80, 0x41, 0x48, 0x86, 0x4b, 0x02,
	0x45, 0x2a, 0xd4, 0x2f, 0x38, 0xc0, 0xd5, 0xd9, 0xd3, 0xcd, 0xd3, 0xd5, 0x45, 0x20, 0x45, 0x48,
	0x8d, 0x4b, 0x11, 0x5d, 0xa3, 0x7f, 0x68, 0x90, 0xb3, 0x6b, 0x7c, 0x68, 0x88, 0xa7, 0x8f, 0x67,
	0x94, 0x63, 0x88, 0xa7, 0xbf, 0x9f, 0xc0, 0x09, 0xc6, 0x24, 0x36, 0x70, 0x28, 0x19, 0x03, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x28, 0x2e, 0x8e, 0xeb, 0x5b, 0x01, 0x00, 0x00,
}
