// Code generated by protoc-gen-go. DO NOT EDIT.
// source: metric.proto

package atlas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// MetricType represents all metric types in the system.
type MetricType int32

const (
	// Due to first enum value has to be zero in proto3
	MetricType_METRIC_TYPE_RESERVED MetricType = 0
	// Unspecified means we do not know its type
	MetricType_METRIC_TYPE_UNSPECIFIED MetricType = 100
	// CPU usage metric
	MetricType_METRIC_TYPE_CPU MetricType = 200
	// RAM usage metric
	MetricType_METRIC_TYPE_RAM MetricType = 300
)

var MetricType_name = map[int32]string{
	0:   "METRIC_TYPE_RESERVED",
	100: "METRIC_TYPE_UNSPECIFIED",
	200: "METRIC_TYPE_CPU",
	300: "METRIC_TYPE_RAM",
}

var MetricType_value = map[string]int32{
	"METRIC_TYPE_RESERVED":    0,
	"METRIC_TYPE_UNSPECIFIED": 100,
	"METRIC_TYPE_CPU":         200,
	"METRIC_TYPE_RAM":         300,
}

func (x MetricType) String() string {
	return proto.EnumName(MetricType_name, int32(x))
}

func (MetricType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_da41641f55bff5df, []int{0}
}

// Metric is one metric tuple
// (metric identifier [optional], timestamp [optional], description [optional], metric value)
// Metric can be classified either by type or by name.
// Identifier can be omitted, in case either both sides understand what they are talking about or
// identifier is provided in parent's (outer) data type, such as Metric
type Metric struct {
	// Types that are valid to be assigned to TypeOptional:
	//	*Metric_Type
	TypeOptional isMetric_TypeOptional `protobuf_oneof:"type_optional"`
	// Types that are valid to be assigned to NameOptional:
	//	*Metric_Name
	NameOptional isMetric_NameOptional `protobuf_oneof:"name_optional"`
	// Types that are valid to be assigned to TimestampOptional:
	//	*Metric_Ts
	TimestampOptional isMetric_TimestampOptional `protobuf_oneof:"timestamp_optional"`
	// Types that are valid to be assigned to DescriptionOptional:
	//	*Metric_Description
	DescriptionOptional isMetric_DescriptionOptional `protobuf_oneof:"description_optional"`
	// Types that are valid to be assigned to Value:
	//	*Metric_StringValue
	//	*Metric_DoubleValue
	//	*Metric_Int32Value
	//	*Metric_Uint32Value
	//	*Metric_Int64Value
	//	*Metric_Uint64Value
	//	*Metric_BytesValue
	Value                isMetric_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Metric) Reset()      { *m = Metric{} }
func (*Metric) ProtoMessage() {}
func (*Metric) Descriptor() ([]byte, []int) {
	return fileDescriptor_da41641f55bff5df, []int{0}
}

func (m *Metric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metric.Unmarshal(m, b)
}
func (m *Metric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metric.Marshal(b, m, deterministic)
}
func (m *Metric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metric.Merge(m, src)
}
func (m *Metric) XXX_Size() int {
	return xxx_messageInfo_Metric.Size(m)
}
func (m *Metric) XXX_DiscardUnknown() {
	xxx_messageInfo_Metric.DiscardUnknown(m)
}

var xxx_messageInfo_Metric proto.InternalMessageInfo

type isMetric_TypeOptional interface {
	isMetric_TypeOptional()
}

type Metric_Type struct {
	Type MetricType `protobuf:"varint,100,opt,name=type,proto3,enum=atlas.MetricType,oneof"`
}

func (*Metric_Type) isMetric_TypeOptional() {}

func (m *Metric) GetTypeOptional() isMetric_TypeOptional {
	if m != nil {
		return m.TypeOptional
	}
	return nil
}

func (m *Metric) GetType() MetricType {
	if x, ok := m.GetTypeOptional().(*Metric_Type); ok {
		return x.Type
	}
	return MetricType_METRIC_TYPE_RESERVED
}

type isMetric_NameOptional interface {
	isMetric_NameOptional()
}

type Metric_Name struct {
	Name string `protobuf:"bytes,110,opt,name=name,proto3,oneof"`
}

func (*Metric_Name) isMetric_NameOptional() {}

func (m *Metric) GetNameOptional() isMetric_NameOptional {
	if m != nil {
		return m.NameOptional
	}
	return nil
}

func (m *Metric) GetName() string {
	if x, ok := m.GetNameOptional().(*Metric_Name); ok {
		return x.Name
	}
	return ""
}

type isMetric_TimestampOptional interface {
	isMetric_TimestampOptional()
}

type Metric_Ts struct {
	Ts *timestamp.Timestamp `protobuf:"bytes,200,opt,name=ts,proto3,oneof"`
}

func (*Metric_Ts) isMetric_TimestampOptional() {}

func (m *Metric) GetTimestampOptional() isMetric_TimestampOptional {
	if m != nil {
		return m.TimestampOptional
	}
	return nil
}

func (m *Metric) GetTs() *timestamp.Timestamp {
	if x, ok := m.GetTimestampOptional().(*Metric_Ts); ok {
		return x.Ts
	}
	return nil
}

type isMetric_DescriptionOptional interface {
	isMetric_DescriptionOptional()
}

type Metric_Description struct {
	Description string `protobuf:"bytes,300,opt,name=description,proto3,oneof"`
}

func (*Metric_Description) isMetric_DescriptionOptional() {}

func (m *Metric) GetDescriptionOptional() isMetric_DescriptionOptional {
	if m != nil {
		return m.DescriptionOptional
	}
	return nil
}

func (m *Metric) GetDescription() string {
	if x, ok := m.GetDescriptionOptional().(*Metric_Description); ok {
		return x.Description
	}
	return ""
}

type isMetric_Value interface {
	isMetric_Value()
}

type Metric_StringValue struct {
	StringValue string `protobuf:"bytes,400,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type Metric_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,410,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type Metric_Int32Value struct {
	Int32Value int32 `protobuf:"varint,420,opt,name=int32_value,json=int32Value,proto3,oneof"`
}

type Metric_Uint32Value struct {
	Uint32Value uint32 `protobuf:"varint,430,opt,name=uint32_value,json=uint32Value,proto3,oneof"`
}

type Metric_Int64Value struct {
	Int64Value int64 `protobuf:"varint,440,opt,name=int64_value,json=int64Value,proto3,oneof"`
}

type Metric_Uint64Value struct {
	Uint64Value uint64 `protobuf:"varint,450,opt,name=uint64_value,json=uint64Value,proto3,oneof"`
}

type Metric_BytesValue struct {
	BytesValue []byte `protobuf:"bytes,460,opt,name=bytes_value,json=bytesValue,proto3,oneof"`
}

func (*Metric_StringValue) isMetric_Value() {}

func (*Metric_DoubleValue) isMetric_Value() {}

func (*Metric_Int32Value) isMetric_Value() {}

func (*Metric_Uint32Value) isMetric_Value() {}

func (*Metric_Int64Value) isMetric_Value() {}

func (*Metric_Uint64Value) isMetric_Value() {}

func (*Metric_BytesValue) isMetric_Value() {}

func (m *Metric) GetValue() isMetric_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Metric) GetStringValue() string {
	if x, ok := m.GetValue().(*Metric_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *Metric) GetDoubleValue() float64 {
	if x, ok := m.GetValue().(*Metric_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (m *Metric) GetInt32Value() int32 {
	if x, ok := m.GetValue().(*Metric_Int32Value); ok {
		return x.Int32Value
	}
	return 0
}

func (m *Metric) GetUint32Value() uint32 {
	if x, ok := m.GetValue().(*Metric_Uint32Value); ok {
		return x.Uint32Value
	}
	return 0
}

func (m *Metric) GetInt64Value() int64 {
	if x, ok := m.GetValue().(*Metric_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (m *Metric) GetUint64Value() uint64 {
	if x, ok := m.GetValue().(*Metric_Uint64Value); ok {
		return x.Uint64Value
	}
	return 0
}

func (m *Metric) GetBytesValue() []byte {
	if x, ok := m.GetValue().(*Metric_BytesValue); ok {
		return x.BytesValue
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Metric) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Metric_Type)(nil),
		(*Metric_Name)(nil),
		(*Metric_Ts)(nil),
		(*Metric_Description)(nil),
		(*Metric_StringValue)(nil),
		(*Metric_DoubleValue)(nil),
		(*Metric_Int32Value)(nil),
		(*Metric_Uint32Value)(nil),
		(*Metric_Int64Value)(nil),
		(*Metric_Uint64Value)(nil),
		(*Metric_BytesValue)(nil),
	}
}

func init() {
	proto.RegisterEnum("atlas.MetricType", MetricType_name, MetricType_value)
	proto.RegisterType((*Metric)(nil), "atlas.Metric")
}

func init() { proto.RegisterFile("metric.proto", fileDescriptor_da41641f55bff5df) }

var fileDescriptor_da41641f55bff5df = []byte{
	// 413 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0xd2, 0xcf, 0x8b, 0xd3, 0x40,
	0x14, 0x07, 0xf0, 0xcd, 0x8f, 0xae, 0xf8, 0xd2, 0x75, 0xe3, 0x10, 0x34, 0xac, 0x07, 0x4b, 0x15,
	0x2c, 0x82, 0x59, 0x68, 0x4b, 0xef, 0xda, 0x46, 0xd2, 0x43, 0xa5, 0x4c, 0xd3, 0x82, 0xa7, 0x90,
	0x34, 0x63, 0x09, 0x24, 0x99, 0x90, 0x4c, 0x84, 0xfe, 0x17, 0x9e, 0x3d, 0x7b, 0x2c, 0x9e, 0x3d,
	0x7b, 0xea, 0xc1, 0x3f, 0xc8, 0xa3, 0xcc, 0x24, 0x69, 0xe2, 0x1e, 0xfb, 0x7d, 0x9f, 0x7e, 0x1f,
	0xbc, 0x09, 0xf4, 0x13, 0xc2, 0xf2, 0x68, 0x6f, 0x65, 0x39, 0x65, 0x14, 0xf5, 0x7c, 0x16, 0xfb,
	0xc5, 0xdd, 0xcb, 0x03, 0xa5, 0x87, 0x98, 0xdc, 0x8b, 0x30, 0x28, 0xbf, 0xdc, 0xb3, 0x28, 0x21,
	0x05, 0xf3, 0x93, 0xac, 0x72, 0xc3, 0xbf, 0x0a, 0x5c, 0xaf, 0xc4, 0x1f, 0xd1, 0x1b, 0x50, 0xd9,
	0x31, 0x23, 0x66, 0x38, 0x90, 0x46, 0x4f, 0xc6, 0x4f, 0x2d, 0xd1, 0x60, 0x55, 0x43, 0xf7, 0x98,
	0x11, 0xe7, 0x0a, 0x0b, 0x80, 0x0c, 0x50, 0x53, 0x3f, 0x21, 0x66, 0x3a, 0x90, 0x46, 0x8f, 0x1d,
	0x09, 0x8b, 0x5f, 0xe8, 0x1d, 0xc8, 0xac, 0x30, 0xcf, 0xd2, 0x40, 0x1a, 0x69, 0xe3, 0x3b, 0xab,
	0x5a, 0x6c, 0x35, 0x8b, 0x2d, 0xb7, 0x59, 0xec, 0xc8, 0x58, 0x66, 0x05, 0x7a, 0x05, 0x5a, 0x48,
	0x8a, 0x7d, 0x1e, 0x65, 0x2c, 0xa2, 0xa9, 0x79, 0x92, 0x45, 0x99, 0x82, 0xbb, 0x29, 0x7a, 0x0d,
	0xfd, 0x82, 0xe5, 0x51, 0x7a, 0xf0, 0xbe, 0xfa, 0x71, 0x49, 0xcc, 0x6f, 0x8a, 0x50, 0x2a, 0xd6,
	0xaa, 0x78, 0xc7, 0x53, 0xae, 0x42, 0x5a, 0x06, 0x31, 0xa9, 0xd5, 0x77, 0xae, 0x24, 0xae, 0xaa,
	0xb8, 0x52, 0x43, 0xd0, 0xa2, 0x94, 0x4d, 0xc6, 0x35, 0xfa, 0xc1, 0x51, 0xcf, 0x51, 0x31, 0x88,
	0xf4, 0xd2, 0x54, 0x76, 0xd1, 0x4f, 0x8e, 0x6e, 0x78, 0x53, 0xd9, 0x51, 0x55, 0xd3, 0x6c, 0x5a,
	0xa3, 0x5f, 0x1c, 0x29, 0x75, 0xd3, 0x6c, 0xfa, 0x5f, 0xd3, 0x05, 0xfd, 0xe6, 0x48, 0x6d, 0x9a,
	0x1a, 0x35, 0x04, 0x2d, 0x38, 0x32, 0x52, 0xd4, 0xe8, 0x0f, 0x47, 0x7d, 0xde, 0x24, 0x52, 0x61,
	0x3e, 0xdc, 0xc2, 0x0d, 0xbf, 0xba, 0x47, 0xc5, 0x49, 0xfc, 0x98, 0x07, 0xfc, 0xe0, 0x6d, 0x60,
	0x00, 0xba, 0x3c, 0x6b, 0x9b, 0x3e, 0x03, 0xa3, 0x73, 0xca, 0x36, 0x7f, 0x04, 0x3d, 0xb1, 0xed,
	0x2d, 0x05, 0x68, 0x1f, 0x17, 0x99, 0x60, 0xac, 0x6c, 0x17, 0x2f, 0xe7, 0x9e, 0xfb, 0x79, 0x6d,
	0x7b, 0xd8, 0xde, 0xd8, 0x78, 0x67, 0x2f, 0xf4, 0x2b, 0xf4, 0x02, 0x9e, 0x77, 0x27, 0xdb, 0x4f,
	0x9b, 0xb5, 0x3d, 0x5f, 0x7e, 0x5c, 0xda, 0x0b, 0x3d, 0x44, 0x06, 0xdc, 0x76, 0x87, 0xf3, 0xf5,
	0x56, 0x3f, 0x4b, 0x0f, 0x53, 0xfc, 0x7e, 0xa5, 0x9f, 0xe4, 0xe0, 0x5a, 0x7c, 0x0c, 0x93, 0x7f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x65, 0x1a, 0x25, 0x74, 0xaa, 0x02, 0x00, 0x00,
}
