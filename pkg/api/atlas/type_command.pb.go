// Code generated by protoc-gen-go. DO NOT EDIT.
// source: type_command.proto

package atlas

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// CommandType represents all commands in the system
type CommandType int32

const (
	// Due to first enum value has to be zero in proto3
	CommandType_COMMAND_RESERVED CommandType = 0
	// Unspecified
	CommandType_COMMAND_UNSPECIFIED CommandType = 100
	// Echo request expects echo reply as an answer
	CommandType_COMMAND_ECHO_REQUEST CommandType = 200
	// Echo reply is an answer to echo request
	CommandType_COMMAND_ECHO_REPLY CommandType = 300
	// Request for configuration from the other party
	CommandType_COMMAND_CONFIG_REQUEST CommandType = 400
	// Configuration
	CommandType_COMMAND_CONFIG CommandType = 500
	// Metrics schedule sends schedule by which metrics should be sent.
	CommandType_COMMAND_METRICS_SCHEDULE CommandType = 600
	// Metrics request is an explicit request for metrics to be sent
	CommandType_COMMAND_METRICS_REQUEST CommandType = 700
	// One-time metrics
	CommandType_COMMAND_METRICS CommandType = 800
	// Schedule to send data
	CommandType_COMMAND_DATA_SCHEDULE CommandType = 900
	// Explicit data request
	CommandType_COMMAND_DATA_REQUEST CommandType = 1000
	// Data are coming
	CommandType_COMMAND_DATA CommandType = 1100
	// Address is coming
	CommandType_COMMAND_ADDRESS             CommandType = 1200
	CommandType_COMMAND_EXTRACT             CommandType = 1300
	CommandType_COMMAND_EXTRACT_EXECUTABLES CommandType = 1400
)

var CommandType_name = map[int32]string{
	0:    "COMMAND_RESERVED",
	100:  "COMMAND_UNSPECIFIED",
	200:  "COMMAND_ECHO_REQUEST",
	300:  "COMMAND_ECHO_REPLY",
	400:  "COMMAND_CONFIG_REQUEST",
	500:  "COMMAND_CONFIG",
	600:  "COMMAND_METRICS_SCHEDULE",
	700:  "COMMAND_METRICS_REQUEST",
	800:  "COMMAND_METRICS",
	900:  "COMMAND_DATA_SCHEDULE",
	1000: "COMMAND_DATA_REQUEST",
	1100: "COMMAND_DATA",
	1200: "COMMAND_ADDRESS",
	1300: "COMMAND_EXTRACT",
	1400: "COMMAND_EXTRACT_EXECUTABLES",
}

var CommandType_value = map[string]int32{
	"COMMAND_RESERVED":            0,
	"COMMAND_UNSPECIFIED":         100,
	"COMMAND_ECHO_REQUEST":        200,
	"COMMAND_ECHO_REPLY":          300,
	"COMMAND_CONFIG_REQUEST":      400,
	"COMMAND_CONFIG":              500,
	"COMMAND_METRICS_SCHEDULE":    600,
	"COMMAND_METRICS_REQUEST":     700,
	"COMMAND_METRICS":             800,
	"COMMAND_DATA_SCHEDULE":       900,
	"COMMAND_DATA_REQUEST":        1000,
	"COMMAND_DATA":                1100,
	"COMMAND_ADDRESS":             1200,
	"COMMAND_EXTRACT":             1300,
	"COMMAND_EXTRACT_EXECUTABLES": 1400,
}

func (x CommandType) String() string {
	return proto.EnumName(CommandType_name, int32(x))
}

func (CommandType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e84d1630985fc0a4, []int{0}
}

// Command represents a command used by Control Plane to exchange commands between server and client(s).
type Command struct {
	// Header of the command
	Header *Metadata `protobuf:"bytes,100,opt,name=header,proto3" json:"header,omitempty"`
	// Optional. Any arbitrary sequence of bytes no longer than 2^32
	Bytes []byte `protobuf:"bytes,200,opt,name=bytes,proto3" json:"bytes,omitempty"`
	// Optional. Multiple command's subjects.
	Subjects []*Metadata `protobuf:"bytes,300,rep,name=subjects,proto3" json:"subjects,omitempty"`
	// Optional. Recursive chain of commands
	Commands             []*Command `protobuf:"bytes,400,rep,name=commands,proto3" json:"commands,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_e84d1630985fc0a4, []int{0}
}

func (m *Command) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Command.Unmarshal(m, b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Command.Marshal(b, m, deterministic)
}
func (m *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(m, src)
}
func (m *Command) XXX_Size() int {
	return xxx_messageInfo_Command.Size(m)
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

func (m *Command) GetHeader() *Metadata {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Command) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

func (m *Command) GetSubjects() []*Metadata {
	if m != nil {
		return m.Subjects
	}
	return nil
}

func (m *Command) GetCommands() []*Command {
	if m != nil {
		return m.Commands
	}
	return nil
}

func init() {
	proto.RegisterEnum("atlas.CommandType", CommandType_name, CommandType_value)
	proto.RegisterType((*Command)(nil), "atlas.Command")
}

func init() { proto.RegisterFile("type_command.proto", fileDescriptor_e84d1630985fc0a4) }

var fileDescriptor_e84d1630985fc0a4 = []byte{
	// 392 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xbf, 0xce, 0xd2, 0x50,
	0x18, 0xc6, 0xed, 0x57, 0xf9, 0xe3, 0x0b, 0x81, 0xe3, 0x0b, 0x48, 0x05, 0x4d, 0x1a, 0x17, 0x89,
	0x1a, 0x06, 0xbd, 0x82, 0x7a, 0xfa, 0x22, 0x4d, 0x28, 0xe0, 0x39, 0xad, 0xc1, 0xa9, 0x29, 0xb4,
	0x89, 0x31, 0x22, 0x84, 0xd6, 0x81, 0xdd, 0xd5, 0x84, 0xc1, 0x0b, 0x70, 0x70, 0x64, 0xf0, 0x02,
	0xbc, 0x00, 0x06, 0x2f, 0xc0, 0x4b, 0xf0, 0x02, 0x1c, 0x1c, 0x4d, 0x4a, 0x8b, 0xb5, 0xf9, 0xc6,
	0xfe, 0x7e, 0xcf, 0xf3, 0xe4, 0x6d, 0x72, 0x00, 0xe3, 0xfd, 0x36, 0xf4, 0x56, 0x9b, 0xf5, 0xda,
	0x7f, 0x1f, 0x0c, 0xb7, 0xbb, 0x4d, 0xbc, 0xc1, 0x92, 0x1f, 0xbf, 0xf3, 0xa3, 0x5e, 0x2b, 0x51,
	0xeb, 0x30, 0xf6, 0x03, 0x3f, 0xf6, 0xcf, 0xee, 0xc1, 0x57, 0x05, 0x2a, 0xfc, 0x9c, 0xc6, 0x87,
	0x50, 0x7e, 0x13, 0xfa, 0x41, 0xb8, 0xd3, 0x02, 0x5d, 0x19, 0xd4, 0x9e, 0x36, 0x87, 0x49, 0x71,
	0x68, 0xa7, 0x15, 0x91, 0x6a, 0xec, 0x40, 0x69, 0xb9, 0x8f, 0xc3, 0x48, 0x3b, 0x29, 0xba, 0x32,
	0xa8, 0x8b, 0xf3, 0x17, 0x3e, 0x81, 0x6a, 0xf4, 0x61, 0xf9, 0x36, 0x5c, 0xc5, 0x91, 0x76, 0xbc,
	0xd2, 0xd5, 0xeb, 0x26, 0x2e, 0x09, 0x7c, 0x0c, 0xd5, 0xf4, 0xcc, 0x48, 0x3b, 0xa8, 0x49, 0xba,
	0x91, 0xa6, 0xd3, 0x83, 0xc4, 0x25, 0xf0, 0xe8, 0x93, 0x0a, 0xb5, 0x94, 0x3a, 0xfb, 0x6d, 0x88,
	0x6d, 0x60, 0x7c, 0x66, 0xdb, 0xc6, 0xd4, 0xf4, 0x04, 0x49, 0x12, 0xaf, 0xc8, 0x64, 0x37, 0xb0,
	0x0b, 0xad, 0x8c, 0xba, 0x53, 0x39, 0x27, 0x6e, 0x8d, 0x2c, 0x32, 0x59, 0x80, 0x77, 0xa1, 0x9d,
	0x09, 0xe2, 0xe3, 0x99, 0x27, 0xe8, 0xa5, 0x4b, 0xd2, 0x61, 0x27, 0x05, 0xbb, 0x80, 0x05, 0x35,
	0x9f, 0xbc, 0x66, 0xc7, 0x2b, 0xec, 0xc3, 0x9d, 0x4c, 0xf0, 0xd9, 0x74, 0x64, 0xbd, 0xb8, 0xb4,
	0x0e, 0x2a, 0xb6, 0xa0, 0xf1, 0xbf, 0x64, 0xbf, 0x55, 0xbc, 0x0f, 0x5a, 0x06, 0x6d, 0x72, 0x84,
	0xc5, 0xa5, 0x27, 0xf9, 0x98, 0x4c, 0x77, 0x42, 0xec, 0xe7, 0x4d, 0xbc, 0x07, 0xdd, 0xa2, 0xce,
	0x16, 0xbf, 0x97, 0xb0, 0x0d, 0xcd, 0x82, 0x65, 0x5f, 0xca, 0xd8, 0x83, 0x4e, 0x46, 0x4d, 0xc3,
	0x31, 0xfe, 0xed, 0x7d, 0xac, 0xe4, 0x7f, 0x2a, 0x71, 0xd9, 0xd8, 0xaf, 0x0a, 0xde, 0x86, 0x7a,
	0x5e, 0xb1, 0x1f, 0xd5, 0xfc, 0xbe, 0x61, 0x9a, 0x82, 0xa4, 0x64, 0xdf, 0x6e, 0xe5, 0x29, 0x2d,
	0x1c, 0x61, 0x70, 0x87, 0x7d, 0x06, 0xd4, 0xa1, 0x5f, 0xa0, 0x1e, 0x2d, 0x88, 0xbb, 0x8e, 0xf1,
	0x7c, 0x42, 0x92, 0xfd, 0x81, 0x65, 0x39, 0x79, 0x3d, 0xcf, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff,
	0xde, 0x47, 0x8c, 0xa6, 0x6f, 0x02, 0x00, 0x00,
}
