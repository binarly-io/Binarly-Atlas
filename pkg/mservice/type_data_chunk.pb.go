// Code generated by protoc-gen-go. DO NOT EDIT.
// source: type_data_chunk.proto

package mservice

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DataChunkType int32

const (
	// Due to first enum value has to be zero in proto3
	DataChunkType_DATA_CHUNK_RESERVED    DataChunkType = 0
	DataChunkType_DATA_CHUNK_UNSPECIFIED DataChunkType = 10
	DataChunkType_DATA_CHUNK_SCAN_RESULT DataChunkType = 20
)

var DataChunkType_name = map[int32]string{
	0:  "DATA_CHUNK_RESERVED",
	10: "DATA_CHUNK_UNSPECIFIED",
	20: "DATA_CHUNK_SCAN_RESULT",
}

var DataChunkType_value = map[string]int32{
	"DATA_CHUNK_RESERVED":    0,
	"DATA_CHUNK_UNSPECIFIED": 10,
	"DATA_CHUNK_SCAN_RESULT": 20,
}

func (x DataChunkType) String() string {
	return proto.EnumName(DataChunkType_name, int32(x))
}

func (DataChunkType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c69e33da091858ca, []int{0}
}

type DataChunk struct {
	Type DataChunkType `protobuf:"varint,10,opt,name=type,proto3,enum=mservice.DataChunkType" json:"type,omitempty"`
	Uuid *UUID         `protobuf:"bytes,20,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Types that are valid to be assigned to OptionalTimestamp:
	//	*DataChunk_Ts
	OptionalTimestamp isDataChunk_OptionalTimestamp `protobuf_oneof:"optional_timestamp"`
	// Max available for transfer data volume would be 2^64
	Offset uint64 `protobuf:"varint,40,opt,name=offset,proto3" json:"offset,omitempty"`
	// It is sufficient to have uint32 for len because bytes are no longer than 2^32
	Len uint32 `protobuf:"varint,50,opt,name=len,proto3" json:"len,omitempty"`
	// May contain any arbitrary sequence of bytes no longer than 2^32
	Bytes                []byte   `protobuf:"bytes,60,opt,name=bytes,proto3" json:"bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataChunk) Reset()         { *m = DataChunk{} }
func (m *DataChunk) String() string { return proto.CompactTextString(m) }
func (*DataChunk) ProtoMessage()    {}
func (*DataChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_c69e33da091858ca, []int{0}
}

func (m *DataChunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataChunk.Unmarshal(m, b)
}
func (m *DataChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataChunk.Marshal(b, m, deterministic)
}
func (m *DataChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataChunk.Merge(m, src)
}
func (m *DataChunk) XXX_Size() int {
	return xxx_messageInfo_DataChunk.Size(m)
}
func (m *DataChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_DataChunk.DiscardUnknown(m)
}

var xxx_messageInfo_DataChunk proto.InternalMessageInfo

func (m *DataChunk) GetType() DataChunkType {
	if m != nil {
		return m.Type
	}
	return DataChunkType_DATA_CHUNK_RESERVED
}

func (m *DataChunk) GetUuid() *UUID {
	if m != nil {
		return m.Uuid
	}
	return nil
}

type isDataChunk_OptionalTimestamp interface {
	isDataChunk_OptionalTimestamp()
}

type DataChunk_Ts struct {
	Ts *timestamp.Timestamp `protobuf:"bytes,30,opt,name=ts,proto3,oneof"`
}

func (*DataChunk_Ts) isDataChunk_OptionalTimestamp() {}

func (m *DataChunk) GetOptionalTimestamp() isDataChunk_OptionalTimestamp {
	if m != nil {
		return m.OptionalTimestamp
	}
	return nil
}

func (m *DataChunk) GetTs() *timestamp.Timestamp {
	if x, ok := m.GetOptionalTimestamp().(*DataChunk_Ts); ok {
		return x.Ts
	}
	return nil
}

func (m *DataChunk) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *DataChunk) GetLen() uint32 {
	if m != nil {
		return m.Len
	}
	return 0
}

func (m *DataChunk) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DataChunk) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DataChunk_Ts)(nil),
	}
}

func init() {
	proto.RegisterEnum("mservice.DataChunkType", DataChunkType_name, DataChunkType_value)
	proto.RegisterType((*DataChunk)(nil), "mservice.DataChunk")
}

func init() {
	proto.RegisterFile("type_data_chunk.proto", fileDescriptor_c69e33da091858ca)
}

var fileDescriptor_c69e33da091858ca = []byte{
	// 311 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8f, 0x5f, 0x4f, 0xf2, 0x30,
	0x18, 0xc5, 0x19, 0x2f, 0x2f, 0xd1, 0x47, 0x21, 0xb3, 0x4e, 0x58, 0x76, 0xa1, 0x0b, 0x57, 0x8d,
	0x9a, 0x92, 0xe0, 0xad, 0x37, 0xb8, 0xcd, 0x40, 0x34, 0xc4, 0x94, 0xcd, 0xdb, 0x59, 0xa0, 0xe0,
	0x22, 0x5b, 0x17, 0xda, 0x99, 0xf0, 0x6d, 0xfd, 0x28, 0x66, 0x9d, 0xe0, 0x9f, 0xbb, 0x9e, 0x9c,
	0x5f, 0x4f, 0x7e, 0x0f, 0x9c, 0xa9, 0x6d, 0xce, 0xe3, 0x05, 0x53, 0x2c, 0x9e, 0xbf, 0x16, 0xd9,
	0x1b, 0xc9, 0x37, 0x42, 0x09, 0x74, 0x90, 0x4a, 0xbe, 0x79, 0x4f, 0xe6, 0xdc, 0x39, 0xd1, 0xc0,
	0x5c, 0xa4, 0xa9, 0xc8, 0xaa, 0xd2, 0xb9, 0x58, 0x09, 0xb1, 0x5a, 0xf3, 0xbe, 0x4e, 0xb3, 0x62,
	0xd9, 0x57, 0x49, 0xca, 0xa5, 0x62, 0x69, 0x5e, 0x01, 0xbd, 0x0f, 0x03, 0x0e, 0x7d, 0xa6, 0x98,
	0x57, 0x2e, 0xa2, 0x2b, 0x68, 0x94, 0x1b, 0x36, 0xb8, 0x06, 0x6e, 0x0f, 0xba, 0x64, 0x37, 0x4d,
	0xf6, 0x48, 0xb8, 0xcd, 0x39, 0xd5, 0x10, 0xea, 0x41, 0xa3, 0x28, 0x92, 0x85, 0x6d, 0xb9, 0x06,
	0x3e, 0x1a, 0xb4, 0xbf, 0xe1, 0x28, 0x1a, 0xfb, 0x54, 0x77, 0xe8, 0x1a, 0xea, 0x4a, 0xda, 0xe7,
	0x9a, 0x70, 0x48, 0x25, 0x43, 0x76, 0x32, 0x24, 0xdc, 0xc9, 0x8c, 0x6a, 0xb4, 0xae, 0x24, 0xea,
	0x40, 0x53, 0x2c, 0x97, 0x92, 0x2b, 0x1b, 0xbb, 0x06, 0x6e, 0xd0, 0xaf, 0x84, 0x4c, 0xf8, 0xb7,
	0xe6, 0x99, 0x3d, 0x70, 0x0d, 0xdc, 0xa2, 0xe5, 0x13, 0x59, 0xf0, 0x7f, 0xb6, 0x55, 0x5c, 0xda,
	0xb7, 0xae, 0x81, 0x8f, 0x69, 0x15, 0xee, 0x2c, 0x40, 0x22, 0x57, 0x89, 0xc8, 0xd8, 0x3a, 0xde,
	0x1f, 0x7a, 0xf9, 0x02, 0xad, 0x5f, 0xfa, 0xa8, 0x0b, 0xa7, 0xfe, 0x30, 0x1c, 0xc6, 0xde, 0x28,
	0x9a, 0x3c, 0xc4, 0x34, 0x98, 0x06, 0xf4, 0x39, 0xf0, 0xcd, 0x1a, 0x72, 0xa0, 0xf3, 0xa3, 0x88,
	0x26, 0xd3, 0xa7, 0xc0, 0x1b, 0xdf, 0x8f, 0x03, 0xdf, 0x84, 0x3f, 0xdd, 0xd4, 0x1b, 0x4e, 0xca,
	0x9f, 0xd1, 0x63, 0x68, 0x5a, 0xb3, 0xa6, 0xbe, 0xe8, 0xe6, 0x33, 0x00, 0x00, 0xff, 0xff, 0x68,
	0xb3, 0x4c, 0xa3, 0xa2, 0x01, 0x00, 0x00,
}
